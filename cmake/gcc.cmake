# This file was automatically generated by RASC

# Toolchain binary directory.
#(Should avoid spaces in the path or have to escape them)
if(DEFINED ARM_TOOLCHAIN_PATH AND NOT ARM_TOOLCHAIN_PATH STREQUAL "")
  set(CMAKE_FIND_ROOT_PATH "${ARM_TOOLCHAIN_PATH}")
  message("Using ARM_TOOLCHAIN_PATH given with cmake settings -DARM_TOOLCHAIN_PATH=${ARM_TOOLCHAIN_PATH}")
elseif(DEFINED ENV{ARM_TOOLCHAIN_PATH} AND NOT ENV{ARM_TOOLCHAIN_PATH} STREQUAL "")
  message("Using ARM_TOOLCHAIN_PATH defined in environment: $ENV{ARM_TOOLCHAIN_PATH}")
  set(CMAKE_FIND_ROOT_PATH $ENV{ARM_TOOLCHAIN_PATH})
elseif(DEFINED ENV{ARM_GCC_TOOLCHAIN_PATH} AND NOT ENV{ARM_GCC_TOOLCHAIN_PATH} STREQUAL "")
  message("Using ARM_TOOLCHAIN_PATH defined in environment: $ENV{ARM_GCC_TOOLCHAIN_PATH}")
  set(CMAKE_FIND_ROOT_PATH $ENV{ARM_GCC_TOOLCHAIN_PATH})
else ()
  message(FATAL_ERROR "Toolchain path not defined. Please set ARM_TOOLCHAIN_PATH variable to set the toolchain's bin folder")
endif()

if(NOT EXISTS "${CMAKE_FIND_ROOT_PATH}" OR NOT IS_DIRECTORY "${CMAKE_FIND_ROOT_PATH}")
  message(FATAL_ERROR "Toolchain path does not exists: ${CMAKE_FIND_ROOT_PATH}")
endif()

set(CMAKE_SYSTEM_NAME Generic)
set(CMAKE_SYSTEM_PROCESSOR arm)

# Use add_library() with the STATIC option to name the source file in the generated project.
# This avoids running the linker and is intended for use with cross-compiling toolchains that
# cannot link without custom flags or linker scripts
set(CMAKE_TRY_COMPILE_TARGET_TYPE STATIC_LIBRARY)

if (CMAKE_HOST_WIN32 )
  SET(BINARY_FILE_EXT ".exe")
else()
  SET(BINARY_FILE_EXT "")
endif()

set(TARGET_TRIPLE arm-none-eabi)

# Don't set compiler target since VS code extensions sends --target parameter to gcc
#set(CMAKE_C_COMPILER_TARGET ${TARGET_TRIPLE})
#set(CMAKE_CXX_COMPILER_TARGET ${TARGET_TRIPLE})

# CMake variables for compiler, assembler, native build system
SET(CMAKE_C_COMPILER "${CMAKE_FIND_ROOT_PATH}/${TARGET_TRIPLE}-gcc${BINARY_FILE_EXT}" CACHE STRING "C Compiler")
SET(CMAKE_CXX_COMPILER "${CMAKE_FIND_ROOT_PATH}/${TARGET_TRIPLE}-g++${BINARY_FILE_EXT}" CACHE STRING "C++ Compiler")
SET(CMAKE_ASM_COMPILER "${CMAKE_FIND_ROOT_PATH}/${TARGET_TRIPLE}-gcc${BINARY_FILE_EXT}" CACHE STRING "ASM Compiler")

# Compiling process can be further customised if required
#set(CMAKE_C_COMPILE_OBJECT "<CMAKE_C_COMPILER> <DEFINES> <INCLUDES> <FLAGS> -MF <SOURCE>.d -MT <OBJECT>.d -o <OBJECT> -c <SOURCE>")
#set(CMAKE_CXX_COMPILE_OBJECT "<CMAKE_CXX_COMPILER> <DEFINES> <INCLUDES> <FLAGS> -MF <SOURCE>.d -MT <OBJECT>.d -o <OBJECT> -c <SOURCE>")
